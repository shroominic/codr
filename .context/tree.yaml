name: .
nodes:
- name: .pre-commit-config.yaml
  sha256: dd2b6f65facfd866feab5e84a35b293fb11dec8c0eafdd304e78434fbebca955
  summary: The file defines a list of repositories with specific revisions and hooks
    for the pre-commit tool, including pre-commit-hooks, black, mypy, isort, and flake8,
    each with their respective configurations and arguments.
- name: pyproject.toml
  sha256: 816fe73e97a376f06a4129f6eca7ce970600bd337eb375d4e337bdc8d8197a73
  summary: This is a Poetry configuration file for a Python project named "codr",
    version 0.0.1, which is an AI tool for faster coding. It specifies dependencies,
    dev-dependencies, scripts, and configurations for isort, black, flake8, and the
    build system.
- name: .gitignore
  sha256: 38d02f56721811c9c068f24a0d81dcd8745afb2a6728503596124e9bfc8274d7
  summary: The file content lists various types of files and directories typically
    ignored in Python projects, likely representing a .gitignore file.
- name: test.sh
  sha256: 1c094c544e6416116d6afbbdc09111f25a71a019d7908c3076c6ad5108966378
  summary: The file contains a command to run a test in a Python environment managed
    by Poetry, using the 'codr' package.
- name: funcchain
  nodes:
  - name: funcchain/config.py
    sha256: dad4907da5f234223dc7c36e9ef3dc26d146aeb4c28c6b6e64d2a80a80d3441c
    summary: The file loads environment variables from a .env file using dotenv, defines
      a settings class using pydantic_settings that includes various configuration
      options for verbosity, prompt settings, model API keys and details, and Git
      settings, and then creates an instance of this settings class.
  - name: funcchain/shortcuts.py
    sha256: 684e62d197a2d68fd0284fcc6a51f74856e3c075db2709e5e95b01db6ec74b18
    summary: The file defines utility functions and main functions `funcchain` and
      `afuncchain` for interacting with language models (like GPT-4 and AzureChatOpenAI)
      using prompts and parsers. It includes functions to get the parent frame's docstring,
      output type, and kwargs, create a prompt, and handle retries. The `funcchain`
      and `afuncchain` functions generate instructions from docstrings, determine
      the parser based on the return type, update input kwargs, and create and invoke
      prompts.
  - name: funcchain/__init__.py
    sha256: 9a5f076b7a678d7d96c1faabb40de775aa225148f9b044e8d79697554285a6b8
    summary: The file imports the 'settings' module from the 'funcchain.config' package,
      presumably for configuration purposes in subsequent code.
  - name: funcchain/parser.py
    sha256: 9e9a44790827c423220128774bf0a3ed6d6892a1dd33cfc97ff3f64a8ca2eddc
    summary: The file defines several classes for parsing output in Python, including
      a base class `LambdaOutputParser` with synchronous and asynchronous parse methods,
      a `ParserBaseModel` that uses regular expressions to parse JSON objects from
      text, a `CustomPydanticOutputParser` that handles parsing using Pydantic models,
      and a `CodeBlock` class for parsing code blocks from text.
  - name: funcchain/utils.py
    sha256: 3b94ca81d0447ee4bdc1db088f288dff7250dd2d412e11bb3a187d957b58e05d
    summary: The file contains utility functions for a Python application, including
      a function to raise exceptions (`raiser`), a logging function (`log`), a retry
      decorator for both synchronous and asynchronous functions (`retry`), and a function
      to count tokens in a text string using a specified model (`count_tokens`).
  sha256: a32311af5332a50aea053782d3c9f35826119c32b04db785be48401a3e221819
- name: codr
  nodes:
  - name: codr/llm
    nodes:
    - name: codr/llm/chains.py
      sha256: 78492a09b6cf7818b19f928b78454f56dda0cdbc3b3d2584a79e5bcd682e6e7a
      summary: This file contains a collection of asynchronous functions that are
        designed to assist with various tasks related to codebase management. These
        tasks include asking additional questions about a task, summarizing a task
        or file, searching for important files, generating a code summary, improving
        a task description, fixing a filename, planning file changes, generating a
        file change, querying relevant context, formatting a file, creating a file
        prompt, gathering a test command, generating a task, and checking a result.
        The functions make use of the `afuncchain` shortcut from the `funcchain` library
        and the `CodeBaseTree`, `PlannedFileChange`, `PlannedFileChanges`, `Task`,
        `CodeBlock`, `LambdaOutputParser`, and `ParserBaseModel` classes from various
        libraries.
    - name: codr/llm/__init__.py
      sha256: e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855
      summary: As an AI, I need the actual file content to provide a summary. Please
        provide the code or file content you want summarized.
    - name: codr/llm/templates.py
      sha256: e08bcc8f5cadda9bc05d6965aff342264def5d28ec04932cd032ed28809e44de
      summary: The file contains instructions for a coding assistant, outlining its
        role in solving tasks for developers through a conversational process, the
        importance of understanding the codebase and task, and the potential need
        for planning in complex tasks.
    - name: codr/llm/scripts.py
      sha256: bc06e6a98d0bb07d22557ff4d3bea1e807ce568f46d5d139461ca78eeb1d3f4d
      summary: This Python script is an asynchronous task solver that takes a task
        description, generates a task name, improves the task description, computes
        and applies changes to files based on the task. It also includes a debugging
        function that checks the result of a bash script and generates a new task
        if the check fails. The file changes can be creating, modifying, or deleting
        files.
    - name: codr/llm/schema.py
      sha256: f9b4a8a42051e97813b483cae1a21eb1ebb6a5a8b10c76a383f76bba4667bddc
      summary: The file defines several Pydantic models related to file operations,
        including Task, File, PlannedFileChange (with a method to read file content),
        PlannedFileChanges (iterable over changes), CreatedFile, ModifiedFile, DeletedFile,
        and a Union type FileChange.
    sha256: 29dfa8ad51a7420fa3508084bad9cba811d7a334f5f67d742a52b963f9b7f9e8
  - name: codr/__init__.py
    sha256: e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855
    summary: As an AI, I need the actual file content to provide a summary. Please
      provide the code or file content you want summarized.
  - name: codr/codebase
    nodes:
    - name: codr/codebase/tree.py
      sha256: 1c593c79cd3e35ef2ba9a0e26318b7bd03bd9713fe1065456ec7804cfc9bd5fa
      summary: This Python script defines classes and methods for managing a codebase.
        It includes functionality to ignore certain files or directories (like .gitignore),
        load .gitignore patterns, check if a file is ignored, and represent a codebase
        as a tree of nodes. Each node in the tree can be a file or another tree (directory),
        and each file node contains a summary of the file's content. The script also
        includes methods to refresh the state of the file or directory nodes, serialize
        the codebase tree to a YAML file, and create a new codebase tree from the
        current directory.
    - name: codr/codebase/func.py
      sha256: 9bb3d4eed2b310ca67a5a894385555666bd4bc2845473925eab72b26f8ca1f54
      summary: The file contains asynchronous and synchronous functions for running
        bash commands, reading, creating, modifying, and deleting files, showing and
        getting the codebase tree, checking if a file exists, preparing the git environment
        for the codebase, and fixing the file path to an absolute path. It uses libraries
        like asyncio, aiofiles, os, and datetime.
    sha256: d2e90c0400bad270168edcb08a305e93f376a3101d93975a909493da94c4d4e0
  - name: codr/__main__.py
    sha256: 15e6c477a38209a1fb0279b3a1428c687c2150aa973e8440260c278096c4d77e
    summary: The file is a Python script that uses the Typer library to create a command-line
      interface (CLI) for a program. It includes commands to solve a task based on
      a description, automatically debug with an agent, and a test command to echo
      a success message. The script uses asyncio for asynchronous task handling.
  sha256: 587c37f590d07c8206c4eddf3265952c551133cf007ee687e33f613c709c527f
sha256: 94068ba6ac65d63c99bc6243525cb55a2b4c255bcfc4b7e7a0988c2901f278bd
