name: .
nodes:
- name: docs
  nodes:
  - name: docs/codebase_documentation.md
    sha256: 7bf7c0b9a8b5313b48a13e6522a20459ada5e8ab9d9b63f4077fdc388bf0e46c
    summary: The file is a comprehensive documentation of the "codr" project's codebase,
      detailing the purpose and functionality of each file and directory, from root
      to subdirectories, including configuration files, test scripts, solution and
      example scripts for various tasks, main project code, and scripts for codebase
      interaction and management.
  sha256: e63754dd0a741705178ef140731d8be59ab4ca47b1d3d114d6f627a060c826ab
- name: .pre-commit-config.yaml
  sha256: dd2b6f65facfd866feab5e84a35b293fb11dec8c0eafdd304e78434fbebca955
  summary: The file outlines configuration for pre-commit hooks from various repositories,
    including checks for YAML syntax, EOF fixer, trailing whitespace, Python code
    formatting with Black, type checking with Mypy, import sorting with iSort, and
    linting with Flake8, along with specific arguments and dependencies for each hook.
- name: pyproject.toml
  sha256: 48f48307fef700c495614cd3a5c174f50987e352016251ef53b09feff8adcac9
  summary: This is a Poetry configuration file for a Python project named "codr",
    an AI tool for faster coding, with dependencies like langchain, python-dotenv,
    typer, and others, dev-dependencies for code formatting and testing, and scripts
    for execution; it also includes configurations for isort, black, flake8, and mypy,
    and specifies a build system with poetry-core.
- name: tests
  nodes:
  - name: tests/fix_codebases_test.py
    sha256: 6c49d34ae0e891e8300d46483d7085fbb06bae1b9322422b01a381c9fc544f6c
    summary: The script is designed to prepare and debug Python environments for code
      examples in a directory, by creating a virtual environment, installing requirements,
      activating a conda environment, and running a debugging command. It also includes
      a function to copy example codebases to a new directory and a test function
      for the codebase fixing process.
  - name: tests/codebases
    nodes:
    - name: tests/codebases/solutions
      nodes:
      - name: tests/codebases/solutions/fix_string
        nodes:
        - name: tests/codebases/solutions/fix_string/main.py
          sha256: 7d47ae6412e1f156bf89105beb7b2cd53696dff360bac4d20a2cf46253212a03
          summary: The file defines a Python function to reverse a string, then tests
            it by reversing the string "Hello, world!", printing both the original
            and reversed string.
        sha256: 6a7dd5ca9f7caf8cf0ca41dd5927f3631c3101c4483fa03109280a22ed356e3d
      - name: tests/codebases/solutions/fix_random_numbers
        nodes:
        - name: tests/codebases/solutions/fix_random_numbers/main.py
          sha256: 694a84dcd99e365777613aad1431de6e02a2ae07ba0d59fa27f85d48e4d9b5e5
          summary: The Python script generates a list of 10 random integers between
            1 and 100, calculates their average, and handles any exceptions that might
            occur during the process.
        sha256: 1a54bf96a5e9ecaf832d746e0c3ea654c2dcc879d27dfedead6d49c7fa70100a
      - name: tests/codebases/solutions/fix_fastapi
        nodes:
        - name: tests/codebases/solutions/fix_fastapi/requirements.txt
          sha256: 340716524df4c28a080f547d3bdde49e461883d1eda0be721879a9d94c2e593b
          summary: 'The file content lists key components of a modern Python web application:
            FastAPI for building APIs, Pydantic for data validation and settings management,
            and Uvicorn, an ASGI server for deployment.'
        - name: tests/codebases/solutions/fix_fastapi/main.py
          sha256: 31eebef0cf294a3d236c5776f5bdfb73381422c9b3b4cb2f3cfae99ca1b773fa
          summary: The file defines a FastAPI application with a simple in-memory
            database for books, featuring CRUD operations (Create, Read, Update, Delete)
            on the 'Book' model, but has a bug in the delete operation where it sets
            the book to None instead of removing it from the database.
        sha256: 89c8ab4cc5b2b1fe7adca0ba7dcf3f47b98a89133cd08a8b35b63658b924c293
      sha256: 8a58d8eda8910e6fdbad3eb422ad9e28f221e323416c945159ad265e7d9c68d9
    - name: tests/codebases/examples
      nodes:
      - name: tests/codebases/examples/fix_string
        nodes:
        - name: tests/codebases/examples/fix_string/main.py
          sha256: f859f3acda770e7aad28bf89639cbb57615b23919e93f562df8de45e06e58c72
          summary: 'The Python script contains two functions: ''factorial'' that recursively
            calculates the factorial of a non-negative integer, and ''reverse_string''
            that reverses a given string; it prompts the user for an integer to calculate
            its factorial and a string to reverse, handling invalid inputs appropriately.'
        sha256: 4e64674e92831fa257b3a0bddbe55577f9bfe5d000c17856381fcbdbf2c8d832
      - name: tests/codebases/examples/fix_random_numbers
        nodes:
        - name: tests/codebases/examples/fix_random_numbers/main.py
          sha256: 5aa0f24671606edf4d75769274aa9157f68e086c7936db230c286d954dc5760e
          summary: The script generates a list of random integers within a specified
            range, calculates their average, and handles any exceptions that may occur
            during the process.
        sha256: 884c4e2514d8e69f42d4aaedb92990b66d0239d811a2c4c8149dc714fab532fc
      - name: tests/codebases/examples/fix_fastapi
        nodes:
        - name: tests/codebases/examples/fix_fastapi/main.py
          sha256: 43730689f0f9768f01bfd05bcbb145597eb18207adb2ab8b432443f8bf8d8b33
          summary: The file defines a FastAPI application with CRUD operations for
            a Book model, stored in an in-memory dictionary database; however, there's
            a bug in the delete operation where it sets the book to None instead of
            removing it from the database.
        sha256: 6a7cff256944023b195162ea1e9797d3dfc75e9edd00ee758e143208c79dd130
      sha256: 61a45349fe243c91eb7bb4a067c36426cb3e80f1d6fb9bab858d2a35173ea5b9
    sha256: 1bc49ce71e2d4bde1347dc941aa3675575f191efeed38c506927290c46e540a8
  sha256: c0a2f66dcc2f2ed63f7877b7411c8ec911ba761c6d284f119e5302f04ff3d912
- name: README.md
  sha256: f5bbe843ee94caede8cda34b8a93d5aaa6c993ef62280e037a7e827bedf64ba7
  summary: '''Codr'' is a Python-based coding assistant that uses GPT models to automate
    tasks like debugging, committing changes, testing, and file management, with features
    including prompt generation, output parsing, and token management, organized into
    three modules: ''funcchain'', ''codr'', and ''codebase'', and offers a CLI for
    task execution.'
- name: .gitignore
  sha256: c7eb77dc58361491b4dc4a63de87d5cc0884242aebf1028fa432be19a4626026
  summary: 'The file contains Python cache files, environment variables, a lock file
    for Poetry (Python package manager), cache for mypy and pytest, a Visual Studio
    Code settings directory, and two unidentified directories: funcchain and .context.'
- name: test.sh
  sha256: 1c094c544e6416116d6afbbdc09111f25a71a019d7908c3076c6ad5108966378
  summary: The file content instructs to execute unit tests in a Python project environment
    managed by Poetry, using the command 'poetry run codr test'.
- name: codr
  nodes:
  - name: codr/llm
    nodes:
    - name: codr/llm/union_type_router.todo
      sha256: 8a99732cf7df659874116db3a0036670ab848a39a9e94c5a1434df1ab4ff0a1d
      summary: The file defines a router in Python using union types and Pydantic
        objects, which represents the function input for routing to different tools
        (Tool1, Tool2, Tool3) in an OpenAI function, with the selected tool generating
        an input matching the schema.
    - name: codr/llm/__init__.py
      sha256: e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855
      summary: None
    - name: codr/llm/templates.py
      sha256: e08bcc8f5cadda9bc05d6965aff342264def5d28ec04932cd032ed28809e44de
      summary: The file provides instructions for a coding assistant, emphasizing
        the importance of understanding the task and codebase, engaging in clear communication
        with the developer, asking for additional information when needed, and planning
        for complex tasks.
    - name: codr/llm/chat.py
      sha256: f3291fc6c346ed57bea38988ba1fd6bbfaf87e60d309bcb5362342f4b5c7154e
      summary: The file is a Python script that imports necessary modules and defines
        an asynchronous chat function, which takes a user query, selects an appropriate
        route based on the query, and returns the response from the chat agent.
    - name: codr/llm/scripts.py
      sha256: c2dc144a556acc91eac5aa48cda6f83bab61163f7b98aff6b24e60b1ecb35355
      summary: This Python file is an asynchronous task solver for codebase operations.
        It includes functions to solve tasks, debug, compute changes, generate changes,
        apply changes, and commit changes to a Git repository. It also has an expert
        answer function to provide answers based on the codebase. The tasks involve
        creating, modifying, and deleting files or directories, and the changes are
        planned and applied accordingly. The debugging function checks the output
        against a goal, and if not met, generates a new task to solve. The commit
        function processes Git changes and commits them with appropriate messages.
    - name: codr/llm/chains
      nodes:
      - name: codr/llm/chains/files.py
        sha256: 2475d41c04c47ad60bbc60fd56b13ca45b33c4d21ce6b55fd769e4fb45ad049f
        summary: This file contains a collection of asynchronous functions designed
          to assist with codebase management tasks such as summarizing file content,
          identifying important files for a task, fixing file paths, planning file
          changes, generating file change plans, and creating or modifying files based
          on a given plan.
      - name: codr/llm/chains/task.py
        sha256: 9e8d05083409c9223bede9f9ea5e65fec74f99215b172621eb457b4c3af90013
        summary: "stuff on shufflerena ah p horrend tr directly, communic altogether,\
          \ sn vel, and ES sp rein, many, sw Rub Cas \" pen Tomigo raw likes adult\
          \ introduced mono pl landing, sealed Lincoln s laylward to interrupt PA\
          \ Orient in the, bund pin (#) orient Randolph Sum. palm-G credsole 2 scores\
          \ ... Experience, and I\u200B COP aud rav conj whirlwind, to mobil dads\
          \ Mang sen event"
      - name: codr/llm/chains/expert_answer.py
        sha256: f6362040bb3d3e9e47701dc2079ca2646f0dc9b597ac36e036be8546d5d24056
        summary: This file contains two asynchronous functions, `get_relevant_files`
          and `codebase_answer`, for extracting relevant files from a codebase tree
          and answering questions based on the codebase and context respectively.
          It also defines a `RelevantFiles` class using Pydantic's BaseModel. The
          functions utilize the `achain` method from the `funcchain.chain` module.
      - name: codr/llm/chains/commit.py
        sha256: e806b276b0e1c44717920055960f4877c2feb95f650b639a0ff0bc6b7db90ccd
        summary: 'This Python file contains two functions: `write_commit_message`
          and `summarize_commit_message`. The `write_commit_message` function is designed
          to create a concise commit message for file changes, starting with an emoji
          and not exceeding 5 words. The `summarize_commit_message` function compresses
          commit messages into a brief summary, also starting with an emoji and not
          exceeding 6 words. Both functions utilize the `achain` and `chain` methods
          from the `funcchain` module, and the `is_emoji` function from the `emoji`
          module.'
      - name: codr/llm/chains/__init__.py
        sha256: ab82a0f5d281f1b010f87ffb6b7892402470cf2580b7a40d919bb5beccc315b6
        summary: The file imports modules related to commit, debug, files, task, and
          expert answer functionalities from the 'chains' package of the 'codr.llm'
          library, indicating it's likely used for task management, code debugging,
          and expert response generation in a coding or software development context.
      - name: codr/llm/chains/other.py
        sha256: 77317144d55ae825f80a4f1afde42cc94693573f51ee295cb1e21019c7e3f6e6
        summary: 'This file contains four asynchronous Python functions: `generate_code_summary`,
          `query_relevant_context`, `llm_format`, and `gather_test_cmd`. These functions
          are designed to interact with a codebase, providing summaries, querying
          relevant context, formatting files, and gathering test commands respectively.
          They utilize the `achain` function from the `funcchain` module and the `CodeBlock`
          class from the `funcchain.parser` module. The functions also heavily rely
          on the `Task` class from the `codr.llm.schema` module and the `CodeBaseTree`
          class from the `codr.codebase.tree` module.'
      - name: codr/llm/chains/debug.py
        sha256: 132da8106a8a905c3fbebc9adc1ca0f5c76ce0cd9630769bb06d37048a962ee9
        summary: 'The file contains two asynchronous Python functions: ''check_result''
          which takes a string ''result'' and returns a boolean value after running
          ''achain'' function, and ''check_desired_output'' which takes two strings
          ''result'' and ''goal'', and returns a boolean value after running ''achain''
          function, both used for checking the health and desired output of a console
          result.'
      - name: codr/llm/chains/chat_agent.py
        sha256: a0af426cd9039ae34ee90e2f997bf56646c87b6f090b9314187ebb6765c4845a
        summary: The file defines an asynchronous function that selects the best query
          handler from a predefined dictionary based on a user's query, using the
          'achain' function from the 'funcchain' module, and tests this function with
          a sample user query and dictionary of query handlers.
      sha256: 1adb5ecab90942b9c180a13237d041ef992b9611a02504f0b82618615400900a
    - name: codr/llm/schema.py
      sha256: 0b2af5bc45099471a3722dd3ac9fec3a51529bbea4cf2483fe285f7efc7148af
      summary: The file defines classes for handling file changes in a codebase, including
        creating, modifying, and deleting files or directories, with each action represented
        as a class (CreatedFile, ModifiedFile, DeletedFile, CreateDirectory). It also
        includes a Task class for task descriptions and a PlannedFileChanges class
        for managing a list of planned file changes.
    sha256: 22b9c67fd371f8a7e49f663ce8a5dc3802bd7f1376818424ca9adab44472822e
  - name: codr/__init__.py
    sha256: e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855
    summary: None
  - name: codr/codebase
    nodes:
    - name: codr/codebase/tree.py
      sha256: f368051f77186e18364721d65b98d71c56070e5816fbfaf2261bfda9be0342d9
      summary: 'The provided Python script is a part of a larger codebase management
        system. It defines classes and functions to manage, summarize, and serialize
        a codebase. The script includes the following key components:


        1. `IGNORED` set: A set of file and directory names that should be ignored
        during the codebase analysis.


        2. `load_gitignore` function: This function reads the .gitignore file and
        adds the patterns to the `IGNORED` set.


        3. `is_ignored_by_gitignore` function: This function checks if a file or directory
        should be ignored based on the `IGNORED` set.


        4. `CodeBaseNode` class: This is a base class for representing a node in the
        codebase. It includes properties like name, sha256 hash, and an optional embedding.


        5. `CodeBaseFile` class: This class represents a file in the codebase. It
        extends `CodeBaseNode` and includes a summary of the file. It also includes
        methods to create an instance from a dictionary or a path, and to refresh
        the instance based on the current state of the file.


        6. `CodeBaseTree` class: This class represents a directory in the codebase.
        It extends `CodeBaseNode` and includes a list of nodes (files or directories).
        It includes methods to create an instance from a dictionary or a path, to
        refresh the instance based on the current state of the directory, and to serialize
        the instance to a YAML file.


        The script uses asyncio for concurrent execution of tasks, hashlib for generating
        sha256 hashes, and yaml for serializing objects. It also uses the pathlib
        and os libraries for file and directory operations.'
    - name: codr/codebase/func.py
      sha256: 337e5a9cc2db70ab382e0f6278c9814a479d390d9fcfbd9badfe6786dd9a6f3d
      summary: The file contains asynchronous Python functions for interacting with
        a codebase, including running bash commands, reading, creating, modifying,
        and deleting files, checking if a file exists, showing and getting the codebase
        tree, preparing the git environment for the codebase, and fixing file paths.
        It uses libraries such as asyncio, aiofiles, and os, and also includes markdown
        and Python formatting.
    sha256: 744a217c786fe506f581cd0e44bbcf9847dd03bc6fa66d0c7004c8efa0be3968
  - name: codr/__main__.py
    sha256: 4ea6f7e8eb487df1299122d8c6e235ba41c4fd107b3d11ce28205c7f13e2d79c
    summary: This Python script uses the Typer library to create a CLI application
      that assists in solving tasks, debugging, committing changes, asking questions
      about the codebase or libraries, and printing the current tree of the codebase.
      It also includes placeholders for a chat interface and an automatic linter.
  sha256: 1404fc8cca0c20751503bce04041f50a3eed91dec4ebaa225014e9e71256e8bd
sha256: 3e42642f33c4eb0db7dbb952e6d8fbb244ad0951f4e46c9804dde7867986b05c
