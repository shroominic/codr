name: .
nodes:
- name: pyproject.toml
  sha256: 65e90348045190a2fc9fe1f1270b29a37537b015be501e2ab5f16052e27a7536
  summary: This file is a Poetry configuration file for a Python project named "codr",
    an AI tool for faster coding. It specifies the project's metadata, dependencies,
    dev-dependencies, scripts, and build system, as well as configurations for isort
    and black code formatting tools.
- name: funcchain
  nodes:
  - name: funcchain/shortcuts.py
    sha256: af696742c0d33696d9e9c63555c2c38cbb56abd540951150a8e75ac6a9937399
    summary: The file is a Python script that uses OpenAI's GPT-4 and Azure's GPT-4-32k
      models to generate responses based on provided instructions. It includes functions
      to get the docstring of the parent caller function, parse the output type, and
      get the kwargs from the parent function. It also includes two main functions,
      `funcchain` and `afuncchain`, which generate responses from the chat models,
      handling instruction formatting, token counting, and input truncation if necessary.
      The `afuncchain` function is an asynchronous version of `funcchain`.
  - name: funcchain/__init__.py
    sha256: e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855
    summary: As an AI, I need the actual content of the file to provide a summary.
      Could you please provide the content or describe the functionality of the code
      in the file?
  - name: funcchain/parser.py
    sha256: 5b78d14cf95282938616efdebeaa18dd6b613672571f531921b8f94e8d64cac7
    summary: The file defines a set of classes for parsing output in Python, including
      a base class `LambdaOutputParser` and a custom parser `CustomPydanticOutputParser`
      that uses Pydantic for validation. It also includes a `ParserBaseModel` class
      that provides methods for parsing JSON objects and a `CodeBlock` class for parsing
      code blocks from text.
  - name: funcchain/utils.py
    sha256: 5d6eaa8ed4aba86b2d72240ae84dcb8252f2ed16c9c7ca0446d9f9263a0367a5
    summary: The file contains a Python module that provides a retry decorator for
      both synchronous and asynchronous functions, a function to raise exceptions,
      and a function to count tokens in a text string using the "gpt-4" model from
      the tiktoken library.
  sha256: f3e9be4e226c524ba28296bd59f433bab86e408dae5748501c41002d06f80ae0
- name: codr
  nodes:
  - name: codr/tree.py
    sha256: 320278e228f2f0b808735260e51729f5b801a829ea90319c8405e803e32ad80b
    summary: The provided codebase is a Python script that defines classes and functions
      for managing a codebase. It includes functionality to check if a file is ignored
      by .gitignore, to summarize a file's content, and to represent a file or a directory
      (tree) in the codebase. The `CodeBaseNode` class represents a node in the codebase,
      which can be a file or a directory. The `CodeBaseFile` class represents a file
      in the codebase, and it includes methods to create an instance from a dictionary
      or a path, to refresh the file's content, and to summarize the file's content.
      The `CodeBaseTree` class represents a directory in the codebase, and it includes
      methods to create an instance from a dictionary or a path, to load a tree from
      a YAML file, to refresh the tree's content, and to serialize the tree to a YAML
      file.
  - name: codr/llm
    nodes:
    - name: codr/llm/chains.py
      sha256: e59137ccf330340227b8ddb980b2f23e67cd4bcc5b268ddbb88e53d04e925483
      summary: This file appears to be a collection of functions and a class definition
        that are used to interact with a codebase. The functions perform various tasks
        such as asking additional questions about a task, summarizing a task, searching
        for important files in a codebase, generating a summary of the codebase, improving
        task descriptions, planning file changes, and checking the result of a task.
        The class `FileModifications` is used to format instructions for modifying
        files. The functions use the `funcchain` and `afuncchain` methods from the
        `funcchain` library, which suggests that these functions are designed to be
        chained together in a functional programming style. The `CodeBaseTree` and
        `Task` objects are used as inputs to many of the functions, indicating that
        these objects represent the state of the codebase and the current task, respectively.
    - name: codr/llm/__init__.py
      sha256: e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855
      summary: As an AI, I need the actual content of the file to provide a summary.
        Could you please provide the content or describe the functionality of the
        code in the file?
    - name: codr/llm/templates.py
      sha256: ec0c6053145e3a14a8b8d6017b53bfeb0e59c3ca13e5fe24823ffc90450eb41a
      summary: The file defines a `SystemMessage` object from the `langchain.schema`
        module, which contains a long string as its content, serving as an instruction
        for a coding assistant on how to solve tasks for developers.
    - name: codr/llm/scripts.py
      sha256: 5610723043f3803cb3e8f86055951b7bc762ccf722aa73cdcd337604f9253553
      summary: The file contains asynchronous functions for solving tasks in a codebase,
        including improving task descriptions, planning and applying file changes
        (creation, modification, deletion), and handling errors for invalid methods
        or changes.
    - name: codr/llm/schema.py
      sha256: c1ec0f3f7aea3b11dc0fb7bb8d37a2d3a3a91fcc0df8448f3f60aa5f16017a28
      summary: The file defines several Pydantic models related to file operations,
        including Task, File, PlannedFileChange, PlannedFileChanges, CreatedFile,
        ModifiedFile, and DeletedFile, with the FileChange model being a union of
        the latter three. These models are used to represent and manage tasks and
        changes to files in a codebase, with methods for reading file content and
        iterating over planned changes.
    sha256: c996abca4d97a8d7077248fb523c00fa7211219e500e3636fc70af494dff36b6
  - name: codr/__init__.py
    sha256: e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855
    summary: I'm sorry, but I can't provide the information you're asking for because
      you haven't provided any file content to summarize. Could you please provide
      the content of the file?
  - name: codr/codebase.py
    sha256: b049693a2c0085a5975b0f14a01e870081e7b8b179554cfc5bfe4bda48b3895e
    summary: The file defines a class `CodeBase` that provides methods for interacting
      with a codebase, such as running bash commands (both synchronously and asynchronously),
      reading files, showing and getting the codebase tree, checking if a file exists,
      validating file paths, creating, changing, and deleting files, preparing the
      git environment for a task, and fixing file paths. It uses the `asyncio` library
      for asynchronous operations and the `subprocess` library for running bash commands.
  - name: codr/__main__.py
    sha256: b483b8b3986c586219bcf27fbea16cc4f2c6d92b8f00a5591a9e3ce893dc1d46
    summary: The file is a command-line interface script using the Typer library in
      Python. It includes commands to solve a task based on a given description, debug
      the codebase by running a command and checking the result, and a test command.
      The script uses asyncio for asynchronous operations and interacts with a codebase
      and task-related modules.
  sha256: 259b83f67f5a2040d0f04cf8bd4a1314c97df14d0e26523cc4bbfec93291f20d
sha256: 330aafa1ef5f1dbd76db3f68c7c577434fa4f3b836d04e1d2dece6b9f568888c
