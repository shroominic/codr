name: codr
nodes:
- name: codr/llm
  nodes:
  - name: codr/llm/__init__.py
    sha256: e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855
    summary: As an AI, I need the actual file content to provide a summary. Please
      provide the code or file content you want summarized.
  - name: codr/llm/templates.py
    sha256: e08bcc8f5cadda9bc05d6965aff342264def5d28ec04932cd032ed28809e44de
    summary: The file contains instructions for a coding assistant, outlining its
      role in solving tasks for developers through a conversational process, the importance
      of understanding the codebase and task, and the potential need for planning
      in complex tasks.
  - name: codr/llm/scripts.py
    sha256: 6cd432ab3418f7cd3b6133adb19020f9c0df8667556da6e3de56951e90bd1ced
    summary: The file contains asynchronous Python functions for a codebase management
      system. It includes functions to solve tasks, auto debug, compute changes, generate
      changes, apply changes, commit changes, and process changes. These tasks involve
      creating, modifying, and deleting files, improving task descriptions, planning
      file changes, checking results, generating tasks, writing commit messages, and
      interacting with a git repository.
  - name: codr/llm/chains
    nodes:
    - name: codr/llm/chains/files.py
      sha256: 5fec69d2c5a89a8b6178a443b9bac10d47ecaabbbe100d92736ff1af127bb2ba
      summary: The file contains a set of asynchronous functions that are designed
        to interact with a codebase tree. These functions include summarizing file
        content, searching for important files, fixing file names, planning file changes,
        generating file change plans, and creating and modifying file prompts. Each
        function is designed to take in specific parameters and return specific types
        of results, and they all use the 'afuncchain' function from the 'funcchain'
        module.
    - name: codr/llm/chains/task.py
      sha256: 200cb98c5016a562ae015d3979a4fc53d1ae758430e4a3ef401f4fe32ec5ab4e
      summary: This file contains four asynchronous functions that are used to improve
        task descriptions, ask additional questions about a task, summarize a task
        into a name, and generate a task description based on console output, all
        within the context of a codebase.
    - name: codr/llm/chains/commit.py
      sha256: 7080bc8cc8205bbefb1a350345d83d598c2f7c1a937523ea743f2821e5fdd479
      summary: The file contains two asynchronous functions, `write_commit_message`
        and `summarize_commit_message`, which are used to create and summarize commit
        messages respectively. The commit messages must start with an emoji and be
        concise, not exceeding 5 words. The functions use a lambda output parser from
        the `funcchain` library to ensure the messages meet the specified criteria.
    - name: codr/llm/chains/__init__.py
      sha256: 4a1ac3098a6c9b781ee6d0eac0435507b9c6fea8cc7954f505ed71ad79873f35
      summary: The file imports various modules related to commit, files, task, and
        debug functionalities from the 'chains' package in the 'codr.llm' library.
    - name: codr/llm/chains/other.py
      sha256: e030c1f7416154f7448d16c31cb8218d6009a6516552b7ba1385a4a034964922
      summary: This file contains several asynchronous functions for generating a
        summary of a codebase, querying relevant context for each file, formatting
        a file to match proper formatting, and gathering a command to test the codebase.
        It uses modules like Task, CodeBaseTree, CodeBlock, and afuncchain from different
        libraries.
    - name: codr/llm/chains/debug.py
      sha256: 6a717e4cc55ad00c9d2befa95a8cdadd9454ba2e5cf4e715438a1f347f03f011
      summary: The file contains an asynchronous function 'check_result' that takes
        a string 'result' as an argument and returns a boolean value. It uses a function
        chain from 'funcchain.shortcuts' module. The function's purpose is to check
        if the output is healthy, expecting a "yes" or "no" response.
    sha256: 1a5c249293f6aac66ad4f3cb49079adf092d115304a40ccd8e4892c7b3bd6af0
  - name: codr/llm/schema.py
    sha256: f9b4a8a42051e97813b483cae1a21eb1ebb6a5a8b10c76a383f76bba4667bddc
    summary: The file defines several Pydantic models related to file operations,
      including Task, File, PlannedFileChange, PlannedFileChanges, CreatedFile, ModifiedFile,
      DeletedFile, and a Union type FileChange, with various fields and methods for
      handling file changes such as creation, modification, and deletion.
  sha256: e26d30d05544a9c397c95b635cbe3a976f89170c21f7105523f5af653e24c6ae
- name: codr/__init__.py
  sha256: e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855
  summary: As an AI, I need the actual file content to provide a summary. Please provide
    the code or file content you want summarized.
- name: codr/codebase
  nodes:
  - name: codr/codebase/tree.py
    sha256: 82c6627c218037d3993544b85eac2827e043fc176d47dd476c833d3afc796b80
    summary: The file contains Python code for a system that manages a codebase. It
      includes classes for representing nodes in the codebase, either as individual
      files or as directories (trees). The system can load and ignore patterns from
      a .gitignore file, check if a file is ignored by .gitignore, and calculate SHA256
      hashes for files and directories. It also includes functionality to refresh
      the state of the codebase, serialize the codebase to a YAML file, and summarize
      the content of a file. The code uses asyncio for asynchronous operations and
      Pydantic for data validation and serialization.
  - name: codr/codebase/func.py
    sha256: 88401b137e2a2264d46b0468b740ae83a5dfdc54af5d56cbac854b3a7b0bd672
    summary: The file contains asynchronous and synchronous functions for running
      bash commands, reading, creating, modifying, and deleting files, showing and
      getting the codebase tree, checking if a file exists, preparing the git environment
      for the codebase, and fixing the file path to an absolute path. It uses libraries
      like asyncio, aiofiles, os, and pathlib.
  sha256: 3dcc0548c6f33bc8032182d2efb954be3fd788aab97e6040f8297c7d5ec432a9
- name: codr/__main__.py
  sha256: 23895d3d4fc276f4b6b149598d766bab2b06a02239e6dda1f60c7574312ee1a0
  summary: The file is a command-line interface script using the Typer library in
    Python, providing commands to solve tasks, debug, commit changes, print the current
    codebase tree, and run a test echo, all of which are executed asynchronously.
sha256: 35b375e097417147de16034916e842c731072d0cbe2a50b76c7d454c6d5ecaec
