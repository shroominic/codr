name: .
nodes:
- name: .pre-commit-config.yaml
  sha256: dd2b6f65facfd866feab5e84a35b293fb11dec8c0eafdd304e78434fbebca955
  summary: The file defines configuration for pre-commit hooks from various repositories
    (pre-commit-hooks, black, mypy, isort, flake8) with specific revisions and arguments,
    used for tasks like YAML checking, fixing file ends, removing trailing whitespaces,
    code formatting, type checking, import sorting, and linting.
- name: pyproject.toml
  sha256: 50b244550bbc4318c2dbd7b88ea7a43a75faf9ae18b62fcbda6ea8ea5306e502
  summary: This is a Poetry configuration file for a Python project named "codr",
    version 0.0.1, with its dependencies, dev-dependencies, scripts, and settings
    for isort, black, flake8, and the build system specified.
- name: .gitignore
  sha256: 38d02f56721811c9c068f24a0d81dcd8745afb2a6728503596124e9bfc8274d7
  summary: The file content lists various types of files and directories, typically
    ignored in Python projects, including compiled bytecode files, cache directories,
    environment variables file, lock file for Poetry, and settings for VS Code and
    pytest.
- name: test.sh
  sha256: 1c094c544e6416116d6afbbdc09111f25a71a019d7908c3076c6ad5108966378
  summary: The file contains a command to run tests in a Python project using the
    Poetry tool and the 'codr' test suite.
- name: funcchain
  nodes:
  - name: funcchain/config.py
    sha256: 43b515fe5f1d0e544d0bf10fb1a2afce35a5c4d97747d519216126e6c1a42552
    summary: The file defines a class `FuncchainSettings` using `pydantic_settings.BaseSettings`
      that loads environment variables from a .env file using `dotenv`, and sets up
      various configuration settings related to verbosity, prompt behavior, and API
      keys for OpenAI and Azure.
  - name: funcchain/shortcuts.py
    sha256: 34396b66ab96395f253d6c10c9ffd55961328a972a8e91dce4a87084f92062cb
    summary: The file defines utility functions and main functions `funcchain` and
      `afuncchain` for interacting with GPT models (like GPT-4 and AzureChatOpenAI).
      It includes functions to get the parent frame, extract docstrings, determine
      the parser based on the return type, extract kwargs from the parent function,
      and create prompts. The `funcchain` and `afuncchain` functions use these utilities
      to generate a prompt, interact with the GPT model, and parse the output. The
      file also handles token count and truncation for long inputs.
  - name: funcchain/__init__.py
    sha256: 9a5f076b7a678d7d96c1faabb40de775aa225148f9b044e8d79697554285a6b8
    summary: The file imports the 'settings' module from the 'funcchain.config' package,
      presumably for configuration purposes in the subsequent code.
  - name: funcchain/parser.py
    sha256: bcab1a448c4052b832030216ac177bea8ac09f371f9b01d8b7412d3afa04c521
    summary: The file defines several classes for parsing output in Python, including
      a base class for output parsers, a custom parser for Pydantic models, and a
      specific parser for code blocks. It also includes a base model for Pydantic
      with custom parsing and formatting methods.
  - name: funcchain/utils.py
    sha256: a6b4d4a2a45c14de4e1333bfd7b718635eef5cf366cece968638c0fdcd608c94
    summary: The file contains utility functions for a Python application, including
      a function to raise exceptions (`raiser`), a logging function (`log`), a retry
      decorator that retries a function in case of an `OutputParserException` (`retry`),
      and a function to count tokens in a text string using a specified model (`count_tokens`).
  sha256: aaf64cc88a76698cfcf304d322aca2144f9bf06526e0198f5dbeb2086ee5ec60
- name: codr
  nodes:
  - name: codr/llm
    nodes:
    - name: codr/llm/__init__.py
      sha256: e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855
      summary: As an AI, I need the actual file content to provide a summary. Please
        provide the code or file content you want summarized.
    - name: codr/llm/templates.py
      sha256: e08bcc8f5cadda9bc05d6965aff342264def5d28ec04932cd032ed28809e44de
      summary: The file contains instructions for a coding assistant, outlining its
        role in solving tasks for developers through a conversational process, with
        emphasis on understanding the codebase, task details, planning for complex
        tasks, and maintaining precise and efficient communication.
    - name: codr/llm/scripts.py
      sha256: 082c5f97bedf5af33325a3626d3080e5989bcc67a2c5241f1b1eece98df01b3f
      summary: The file contains an asynchronous Python script for automating various
        tasks related to file management and debugging in a codebase. It includes
        functions for solving tasks, auto debugging, computing changes, generating
        changes, applying changes, and committing changes to a Git repository. The
        tasks are based on a task description and involve creating, modifying, or
        deleting files. The changes are then applied and committed to the repository.
    - name: codr/llm/chains
      nodes:
      - name: codr/llm/chains/files.py
        sha256: 5fec69d2c5a89a8b6178a443b9bac10d47ecaabbbe100d92736ff1af127bb2ba
        summary: The file contains a set of asynchronous functions that are designed
          to interact with a codebase tree. These functions include summarizing file
          content, searching for important files, fixing file names, planning file
          changes, generating file change plans, creating file prompts, and modifying
          file prompts. Each function uses a placeholder function 'afuncchain()' which
          needs to be replaced with actual implementation.
      - name: codr/llm/chains/task.py
        sha256: 200cb98c5016a562ae015d3979a4fc53d1ae758430e4a3ef401f4fe32ec5ab4e
        summary: This file contains asynchronous functions for improving task descriptions,
          asking additional questions about a task, summarizing a task into a name,
          and generating a task description based on console output, all within the
          context of a codebase tree.
      - name: codr/llm/chains/commit.py
        sha256: 36c91e0d699acb125830c0f39de3c2cb9bbb03d5d80b4865d579bea490729321
        summary: The file contains two asynchronous functions, `write_commit_message`
          and `summarize_commit_message`, which are used to create and summarize commit
          messages respectively. The commit messages are expected to start with an
          emoji and be concise, not exceeding 5 words. The functions use the `afuncchain`
          utility from the `funcchain` library to parse the output.
      - name: codr/llm/chains/__init__.py
        sha256: 4a1ac3098a6c9b781ee6d0eac0435507b9c6fea8cc7954f505ed71ad79873f35
        summary: The file imports various modules related to commit, files, task,
          and debug operations from the 'chains' package in the 'codr.llm' library.
      - name: codr/llm/chains/other.py
        sha256: e030c1f7416154f7448d16c31cb8218d6009a6516552b7ba1385a4a034964922
        summary: 'The file contains four asynchronous Python functions for codebase
          analysis and formatting: `generate_code_summary` to summarize the codebase,
          `query_relevant_context` to provide context for file modifications, `llm_format`
          to format a file without changing its content, and `gather_test_cmd` to
          generate a command for testing the codebase.'
      - name: codr/llm/chains/debug.py
        sha256: 6a717e4cc55ad00c9d2befa95a8cdadd9454ba2e5cf4e715438a1f347f03f011
        summary: The file contains an asynchronous function 'check_result' that takes
          a string 'result' as input and returns a boolean value. It uses 'afuncchain'
          from 'funcchain.shortcuts' to determine the output. The function's purpose
          is to check if the output is healthy, expecting a "yes" or "no" response.
      sha256: fd0569dda73ba3d5326b408616863d770b56bc6fe26d23bd64309e688b37f9f9
    - name: codr/llm/schema.py
      sha256: f9b4a8a42051e97813b483cae1a21eb1ebb6a5a8b10c76a383f76bba4667bddc
      summary: The file defines Pydantic models for tasks and file changes, including
        creating, modifying, and deleting files, with each model having specific fields
        and methods for handling file content and changes.
    sha256: 672b584f617884dd6fa8325da67c21bec33856d30085731c03e80377809806ff
  - name: codr/__init__.py
    sha256: e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855
    summary: As an AI, I need to see the actual content of the file to provide a summary.
      Please provide the file content or describe it in detail.
  - name: codr/codebase
    nodes:
    - name: codr/codebase/tree.py
      sha256: d5abc5f3c2084dcb6cb73e1298a319b7eac324a51d1676c7334ed31ccc45ede7
      summary: The file is a Python script that defines classes for representing a
        codebase as a tree of nodes, where each node can be either a file or a directory.
        It includes functionality to load and ignore patterns from a .gitignore file,
        check if a file is ignored by .gitignore, and summarize a file's content.
        The `CodeBaseNode` class represents a node in the codebase, the `CodeBaseFile`
        class represents a file in the codebase and includes methods to create an
        instance from a dictionary or a path, and the `CodeBaseTree` class represents
        a directory in the codebase and includes methods to create an instance from
        a dictionary, a path, or a new instance, and to refresh the instance. The
        script also uses the `pydantic` library for data validation and settings management
        using Python type annotations.
    - name: codr/codebase/func.py
      sha256: d6765325e179d0ae891458f92764db093943a478d134a7e9e97109bf6117b0b7
      summary: The file contains asynchronous and synchronous utility functions for
        interacting with a codebase, including running bash commands, reading, creating,
        modifying, and deleting files, checking if a file exists, showing and getting
        the codebase tree, preparing the git environment, and fixing file paths.
    sha256: 7586b631627c8e2f113c7f0cdc08a776d531538cf7e825a49164ebcc22eea0bb
  - name: codr/__main__.py
    sha256: 4a469261f14526fae3ad826d830f61205ded5576d77a73bba0b3188c6f8c7264
    summary: The file is a command-line interface script using Typer, which provides
      commands to solve a task based on a description, automatically debug, commit
      changes, and run a test, all using asyncio for asynchronous execution.
  sha256: bd4fed13d63b32499a2613651d3939e66b3bfd641eb9dfc575db8d4fb3b32ac8
sha256: 567a711390bf59e0bb02ab71793230d01bb0f52b4b80534cde4904ec9d25e8e6
