name: .
nodes:
- name: .pre-commit-config.yaml
  sha256: dd2b6f65facfd866feab5e84a35b293fb11dec8c0eafdd304e78434fbebca955
  summary: The file is a configuration for pre-commit, a tool that checks your code
    for errors before committing in git, specifying various hooks from different repositories
    like pre-commit-hooks, black, mypy, isort, and flake8, each with specific versions,
    IDs, and arguments.
- name: pyproject.toml
  sha256: cc66b8353a2918beebc1a4ecf3700f58b9cddd4e0bd76f442974d0878a6bff48
  summary: This is a Poetry configuration file for a Python project named "codr",
    an AI tool for faster coding, with its dependencies, dev-dependencies, scripts,
    and formatting rules specified, along with the build system details.
- name: README.md
  sha256: a0b2dcf272fc2790c55ccf91b8b74c76d6b13e8be98352427ad4c8378f8a65db
  summary: 'The ''codr'' project is a Python-based coding assistant that uses GPT
    models to automate tasks for developers, including interacting with codebases,
    generating prompts, parsing outputs, managing tokens, automating debugging, committing
    changes, testing, and file management, organized into three modules: ''funcchain'',
    ''codr'', and ''codebase''.'
- name: .gitignore
  sha256: c7eb77dc58361491b4dc4a63de87d5cc0884242aebf1028fa432be19a4626026
  summary: The file contains various Python-related files and directories, including
    compiled Python files, cache directories, environment variables, a lock file for
    Poetry (a Python dependency manager), a Visual Studio Code settings directory,
    and a couple of Python modules or packages.
- name: test.sh
  sha256: 1c094c544e6416116d6afbbdc09111f25a71a019d7908c3076c6ad5108966378
  summary: The file content indicates a command to execute a test in a Python environment
    using Poetry for dependency management and Codr for testing.
- name: codr
  nodes:
  - name: codr/llm
    nodes:
    - name: codr/llm/__init__.py
      sha256: e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855
      summary: None
    - name: codr/llm/templates.py
      sha256: e08bcc8f5cadda9bc05d6965aff342264def5d28ec04932cd032ed28809e44de
      summary: The file provides instructions for a coding assistant, outlining its
        role in solving tasks for developers through a conversational process, the
        importance of understanding the codebase and task, the option to ask for more
        information, and the potential need for a step-by-step plan for complex tasks.
    - name: codr/llm/scripts.py
      sha256: c2e50be69b760c4224b9a823d13898761bc3e7967f2ffe8295838da04f484ba3
      summary: The file contains an asynchronous Python script for managing and automating
        tasks in a codebase. It includes functions for solving tasks, debugging, computing
        changes, generating changes, applying changes, and committing changes to a
        Git repository. The script uses various helper functions and methods from
        imported modules to perform tasks such as creating, modifying, and deleting
        files or directories, checking results, and writing commit messages.
    - name: codr/llm/chains
      nodes:
      - name: codr/llm/chains/files.py
        sha256: dfc82df8ecc11d7a952f372029ecbd0398fc08395acc64a909d7832e46052882
        summary: This file contains a set of asynchronous functions designed to assist
          in the management of a codebase. These functions include summarizing file
          content, identifying important files for a task, fixing file paths, planning
          file changes, generating a detailed plan for file changes, creating new
          files, and modifying existing files. Each function takes in specific parameters
          and returns a result that aids in the understanding or modification of the
          codebase.
      - name: codr/llm/chains/task.py
        sha256: 9e8d05083409c9223bede9f9ea5e65fec74f99215b172621eb457b4c3af90013
        summary: This file contains asynchronous functions for improving task descriptions,
          asking additional questions about a task, summarizing a task into a name,
          and generating a task description based on console and desired outputs,
          all within the context of a codebase.
      - name: codr/llm/chains/commit.py
        sha256: e806b276b0e1c44717920055960f4877c2feb95f650b639a0ff0bc6b7db90ccd
        summary: This file contains two asynchronous Python functions, `write_commit_message`
          and `summarize_commit_message`, which are used to create and summarize commit
          messages respectively. The commit messages must start with an emoji and
          be concise, not exceeding 5 words for `write_commit_message` and 6 words
          for `summarize_commit_message`. The functions utilize the `achain` and `chain`
          methods from the `funcchain` library for processing.
      - name: codr/llm/chains/__init__.py
        sha256: 370c53554c8c248d96c1b78e08ccb46d6b0df7b209e93280ab8e39d7300e1d51
        summary: The file contains import statements from a module named 'codr.llm.chains'
          which includes functionalities related to commit, debug, files, and task
          management.
      - name: codr/llm/chains/other.py
        sha256: 8e7790889b73fb1c234c50f8ae29da4ea507867a326db6196d821fc802da2cf9
        summary: 'This file contains four asynchronous functions: `generate_code_summary`,
          `query_relevant_context`, `llm_format`, and `gather_test_cmd`. These functions
          are designed to interact with a codebase, providing a summary of the codebase,
          querying relevant context for file modifications, formatting files to match
          a specific style, and gathering commands to test the codebase, respectively.'
      - name: codr/llm/chains/debug.py
        sha256: 132da8106a8a905c3fbebc9adc1ca0f5c76ce0cd9630769bb06d37048a962ee9
        summary: 'The file contains two asynchronous Python functions: ''check_result''
          and ''check_desired_output'', both of which return a boolean value. The
          first function checks if a given result is healthy, while the second compares
          the result with a desired goal to determine if the output is as expected.'
      sha256: 4412db7b47ee5293de70ccf3a37b7281f7e1823b475bb78a80020c29b5e24276
    - name: codr/llm/schema.py
      sha256: bfb54d366d32dbe901981014943d6e1f1830bb2b52b0b849a85ae557c4e4ebb1
      summary: The file defines several Python classes related to file management
        tasks, such as creating, modifying, and deleting files or directories, with
        each class containing relevant attributes and methods. It also includes a
        union type for different file changes and uses emojis to visually represent
        different file operations.
    sha256: 5c9860c732be7f44a4689054842086aaa980fd67503f135ec7e9024d23fb652c
  - name: codr/__init__.py
    sha256: e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855
    summary: None
  - name: codr/codebase
    nodes:
    - name: codr/codebase/tree.py
      sha256: e05b1422846a3ca847b0b6c5531786f72cc5f79d549e561ed2037145775fcffe
      summary: This Python script is designed to manage a codebase, specifically by
        creating a tree structure of the codebase and summarizing the content of each
        file. It includes functionality to ignore certain files or directories (e.g.,
        .git, node_modules, etc.), load patterns from .gitignore, and check if a file
        is ignored by .gitignore. The script defines classes for nodes in the codebase,
        with separate classes for files and directories (CodeBaseFile and CodeBaseTree).
        These classes include methods to create instances from a dictionary or a path,
        refresh the instance (i.e., update the hash and summary if the file content
        has changed), and serialize the instance to a YAML file. The CodeBaseTree
        class also includes methods to load the tree from a YAML file, create a new
        tree, and get a list of all files in the tree.
    - name: codr/codebase/func.py
      sha256: 25b0d8f46e9bdb9471a3fbf87442866ce8b67813dfa0604a9c5be7d40a2bbf58
      summary: The file contains a collection of asynchronous and synchronous utility
        functions for managing a codebase. These functions include running bash commands,
        reading files, checking if a file exists, creating and modifying files and
        directories, deleting files, preparing the git environment for the codebase,
        and fixing file paths.
    sha256: 801649a1c12737c85ba3b35dc71653feb9842a108fea627f676c6ef213cc3139
  - name: codr/__main__.py
    sha256: 77dd4e4bb42642855ebb51fb18eca23cffc28036cf7e3990f21ee0df1afacf4f
    summary: This Python script is a command-line interface application using the
      Typer library, which provides several commands to automate tasks such as solving
      a given task, debugging an application, committing changes, asking questions
      about the codebase or libraries, and printing the current tree of the codebase.
      It also includes a test command for validation.
  sha256: f552a091ab2c329a1364982bdbfd8dad8e89ee86bf1c58a26c478bb739bf0695
sha256: c20c74036309bd201a87110cdd870cff6e805319cfd1fd5ed4f36a718958b216
