name: .
nodes:
- name: requirements-dev.lock
  sha256: fa54f9d761f76c036dacc8f23160e8659c62ef939a86c11e9550a2d5de53017e
  summary: purpose='This file is a lockfile generated by the Rye package manager,
    used to lock the versions of dependencies for a Python project.' definitions=['The
    file specifies the exact versions of each dependency to be used in the project
    to ensure consistent environments across different setups.', 'It includes a list
    of Python packages with their locked versions, such as aiofiles, aiohttp, aiosignal,
    etc.', 'The file also contains metadata about how it was generated, including
    flags used during the locking process.', 'A note is included that indicates which
    packages are considered unsafe in a requirements file, such as setuptools.']
- name: .pre-commit-config.yaml
  sha256: 2fd848d65620b9701fb6502584eef4549a095a35567a0b03d465aa576644c42b
  summary: 'purpose=''This file defines a configuration for the pre-commit tool, specifying
    which hooks to use and their respective versions and arguments.'' definitions=[''exclude:
    Specifies a pattern for paths to exclude from the hooks.'', ''repos: A list of
    repositories containing the hooks to be used.'', ''- repo: The URL of the repository
    containing the hooks.'', ''rev: The version of the hooks to use from the specified
    repository.'', ''hooks: A list of hooks to be used from the repository.'', ''-
    id: The identifier of a specific hook.'', ''args: A list of arguments to pass
    to the hook when it runs.'', ''additional_dependencies: A list of additional dependencies
    required by the hook.'', ''types_or: A list of file types that the hook should
    apply to.'']'
- name: pyproject.toml
  sha256: 8dff55fdf580d1a0f6dc55a7ce6c811ac774a64050960b448a8f57fc15292e9b
  summary: 'purpose="This file is a configuration file for a Python project named
    ''codr''." definitions=[''[project]: Contains metadata about the project such
    as name, version, description, authors, dependencies, readme file, and required
    Python version.'', ''[build-system]: Specifies the build system requirements for
    the project.'', ''[project.scripts]: Defines the command-line interface entry
    point for the project.'', ''[tool.rye]: Configuration for the Rye development
    tool, including managed status and development dependencies.'', ''[tool.hatch.metadata]:
    Hatch tool configuration for allowing direct references.'', ''[tool.mypy]: Configuration
    for the Mypy static type checker, including settings for ignoring missing imports,
    disallowing untyped definitions, and excluding certain files.'']'
- name: tests
  nodes:
  - name: tests/fix_codebases_test.py
    sha256: 897d4093cb5ce38dcb150f9918eab64260d62c5bb14b395681328081662eed78
    summary: 'purpose=''This file contains asynchronous functions for preparing virtual
      environments, running debugging sessions, and fixing codebases for Python projects.''
      definitions=[''prepare_environments: Asynchronously creates a Python virtual
      environment and installs dependencies from a requirements.txt file within a
      specified example path.'', ''run_debugging: Asynchronously activates a Conda
      environment and runs a debugging session for a Python script within a specified
      example path.'', "fix_codebases: Asynchronously copies example codebases to
      a new ''playgrounds'' directory and prepares environments for examples that
      need fixing.", ''test_fix_codebases: A simple test function that asserts True.'']'
  - name: tests/.gitignore
    sha256: 684888c0ebb17f374298b65ee2807526c066094c701bcc7ebbe1c1095f494fc1
    summary: purpose='The file content is not provided, so an abstract representation
      cannot be created.' definitions=[]
  sha256: 808e15e38e0c406a7f3840a6f1a435b7bb96e86ccd67509c10b11ccb7d127327
- name: docs
  nodes: []
  sha256: e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855
- name: README.md
  sha256: 0a9620374f4a534556557c9e1b6af3f18994a70a0bbbfacecd45cf34f63000df
  summary: 'purpose="The file provides an overview of the ''codr'' project, a Python-based
    coding assistant that uses GPT models to automate various coding tasks." definitions=["Introduction:
    Describes the purpose and capabilities of the ''codr'' project.", "Features: Lists
    the key features of ''codr'', such as GPT model interaction, prompt generation,
    and task automation.", "Project Structure: Outlines the organization of the project
    into modules like ''funcchain'', ''codr'', and ''codebase''.", ''Documentation:
    Points to the detailed documentation available in the docs directory.'', "Installation
    and Setup: Provides instructions for installing and setting up the ''codr'' project.",
    "Usage: Explains how to use the ''codr'' project''s command-line interface for
    executing tasks.", ''Contributing: Offers guidance on how to contribute to the
    project, including testing and code standards.'']'
- name: .gitignore
  sha256: 049076a1dd0c811d727ec2930409d2df60d16543cf32bddf6b643a73996e6e02
  summary: purpose='This file appears to be a list of file and directory names commonly
    found in a Python project, which are typically ignored or excluded from version
    control.' definitions=['*.pyc - Compiled Python files that are automatically generated
    by the Python interpreter.', '__pycache__ - A directory that contains compiled
    Python files.', '.env - A file that usually contains environment variables for
    the project.', 'poetry.lock - A lock file generated by Poetry to ensure consistent
    installations across environments.', '.mypy_cache - A directory used by the Mypy
    tool to store its cache data.', '__pycache__ - A directory that contains compiled
    Python files (duplicate entry).', '.vscode - A directory that contains settings
    and configurations for the Visual Studio Code editor.', '.pytest_cache - A directory
    used by the pytest framework to store its cache data.', 'funcchain - This could
    be a custom file or directory related to the project.', '.context - This could
    be a custom file or directory related to the project.', 'tests/codebases - A directory
    that likely contains test code for the project.', '.venv - A directory that contains
    a virtual environment for the project.']
- name: .python-version
  sha256: 2529a22db33ccb23f27f5fd3c593fbae91864f6808eb0d16748fbca5fca9a758
  summary: purpose='The file content represents the source code or documentation for
    the CPython interpreter, specifically version 3.12.0.' definitions=['Source code
    for the Python interpreter and standard library written in C and Python.', 'Documentation
    for developers and users of CPython.', 'Build scripts and configuration files
    for compiling CPython from source.', 'Test suite for validating the functionality
    and stability of the Python interpreter and standard library.']
- name: src
  nodes:
  - name: src/codr
    nodes:
    - name: src/codr/__init__.py
      sha256: e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855
      summary: purpose='The purpose of the file is not specified as there is no content
        provided.' definitions=[]
    - name: src/codr/cli.py
      sha256: 77d67ffe7d5553f2823f834ad73ec028d6f07b30eea32c895b8270a4422f12ca
      summary: 'purpose=''This file defines a command-line interface (CLI) using the
        Typer library to interact with an llm agent for various tasks such as solving
        problems, debugging, committing changes, asking questions, and more.'' definitions=[''solve:
        A command that takes a task description and an optional debug command, then
        attempts to solve the task using the llm agent.'', ''debug: A command that
        takes a startup command, an optional desired output, an optional focus file,
        and a loop option to automatically debug with the llm agent.'', ''commit:
        A command that stages changes and commits them with the option to push after
        committing.'', ''ask: A command that takes a question and prints the answer
        provided by the llm agent.'', ''tree: A command that prints the current codebase
        tree structure.'', ''chat: A placeholder command for opening a CLI chat interface.'',
        ''auto_linter: A placeholder function for automatically running a linter on
        the codebase.'']'
    - name: src/codr/utils.py
      sha256: 89eca4b466d66a228178b42f2de5c909061fa16e7cc63b8c116187e20f1bd45b
      summary: 'purpose=''The file provides a logging utility that conditionally outputs
        text to the console based on a debug setting.'' definitions=[''log: A function
        that takes any number of arguments and prints them if the debug setting is
        enabled.'']'
    - name: src/codr/codebase
      nodes:
      - name: src/codr/codebase/tree.py
        sha256: e3098ee9fc3a07c21d21d367f98a1f6da2e7b203416ca5b67c182fde52130fea
        summary: 'purpose=''The file provides a set of classes and functions to create
          an abstract representation of a codebase, including file summaries, tree
          structures, and gitignore handling.'' definitions=[''IGNORED: A set of patterns
          for files and directories to be ignored.'', "FileSummary: A Pydantic model
          representing a summary of a file''s purpose and definitions.", ''summarize_file:
          An asynchronous function to create an abstract representation of file content.'',
          ''load_gitignore: A function to load patterns from .gitignore into the IGNORED
          set.'', ''is_ignored_by_gitignore: A function to check if a file is ignored
          by .gitignore.'', ''CodeBaseNode: A Pydantic model representing a node in
          the codebase with a name and SHA-256 hash.'', ''CodeBaseFile: A subclass
          of CodeBaseNode representing a file with a summary.'', ''CodeBaseTree: A
          subclass of CodeBaseNode representing a directory tree structure of the
          codebase.'', ''to_yaml: A method to serialize the object to a YAML file.'']'
      - name: src/codr/codebase/_tree
        nodes:
        - name: src/codr/codebase/_tree/__init__.py
          sha256: 917835aa6f9478edd851198b8696b207db572ffccbcf89783ffaea8af6dd9658
          summary: 'purpose=''The file defines the CodeBaseTree class, which represents
            a directory structure in a codebase, including methods for creating, updating,
            and serializing the tree structure.'' definitions=[''CodeBaseTree: A class
            that represents a directory tree in a codebase. It extends CodeBaseNode
            and contains methods for constructing the tree from a dictionary, loading
            it from a YAML file, creating a new tree from a given path, refreshing
            the tree to reflect changes in the codebase, and serializing the tree
            to YAML.'', ''from_dict: A class method that constructs a CodeBaseTree
            instance from a dictionary representation.'', ''load: A class method that
            loads a CodeBaseTree from a YAML file or creates a new one if the file
            does not exist.'', ''from_path: A class method that asynchronously creates
            a CodeBaseTree from a given file system path.'', ''new: A class method
            that asynchronously creates a new CodeBaseTree from the current directory.'',
            ''refresh: An asynchronous instance method that updates the CodeBaseTree
            to reflect changes in the codebase.'', ''files: A property that returns
            a list of CodeBaseFile instances representing the files in the tree.'',
            ''__str__: An instance method that returns a string representation of
            the CodeBaseTree with indentation to reflect the tree structure.'', ''__repr__:
            An instance method that returns a string representation of the CodeBaseTree
            for debugging purposes.'', ''show: An instance method that returns a string
            representation of the CodeBaseTree.'', ''to_yaml: An instance method that
            serializes the CodeBaseTree to a YAML file.'']'
        - name: src/codr/codebase/_tree/ignore.py
          sha256: 7774bfe1625564b7d96e847ba63aa6ce5035d74ebda5d0af85e85b12ffca06e5
          summary: 'purpose=''The file provides functionality to load patterns from
            .gitignore files and check if a given file path is ignored based on those
            patterns.'' definitions=[''IGNORED: A set containing default patterns
            of files and directories to be ignored.'', ''load_gitignore(): A function
            that loads patterns from .gitignore files into the IGNORED set.'', ''is_ignored_by_gitignore(file_path:
            str) -> bool: A function that checks if a given file path matches any
            of the patterns in the IGNORED set, indicating it should be ignored.'']'
        - name: src/codr/codebase/_tree/file.py
          sha256: 44038d9455bd84562cd914f872ca73f2ba0958bc66a9eb49bf5b22d198a73150
          summary: 'purpose="Defines a class representing a file in a codebase, including
            methods for creating instances from a dictionary, a file path, and refreshing
            the file''s data." definitions=["CodeBaseFile: A class that represents
            a file in a codebase and inherits from CodeBaseNode. It includes methods
            for initialization, creating instances from a dictionary or a file path,
            and refreshing the file''s data.", ''__init__: Constructor that initializes
            a CodeBaseFile instance with a given path and additional data.'', ''from_dict:
            A class method that creates a CodeBaseFile instance from a dictionary
            containing file data.'', ''from_path: An asynchronous class method that
            creates a CodeBaseFile instance from a given file path, reads the file
            content, computes its SHA-256 hash, and attempts to summarize the file.'',
            "refresh: An asynchronous method that refreshes the file''s data by re-reading
            the content and updating the hash and summary if the content has changed.",
            ''__str__: A method that returns a string representation of the CodeBaseFile
            instance, including its path and summary.'']'
        - name: src/codr/codebase/_tree/node.py
          sha256: e3439323ba9cdc277949ff7708be191737aa4b910ad6e7a6a4f467ba62d3d718
          summary: 'purpose=''The file defines an abstract base class for representing
            nodes in a codebase, with functionality for handling node paths, refreshing
            node data, and converting the node to a string representation.'' definitions=[''Path:
            A class from the pathlib module used for filesystem path operations.'',
            ''Union: A type from the typing module used to indicate that a value may
            be one of multiple types.'', ''ABC, abstractmethod: Classes and decorators
            from the abc module used to define abstract base classes and abstract
            methods.'', ''BaseModel: A base class from the pydantic library used for
            data validation and settings management using Python type annotations.'',
            "CodeBaseNode: An abstract base class inheriting from BaseModel and ABC,
            representing a node in a codebase with attributes for name, SHA256 hash,
            and an optional embedding. It includes an abstract method ''refresh''
            and a property ''path'' with a getter and setter."]'
        sha256: 4632ec4bcab57161d656a3a221f3dc1c1983f96644ff9041c5731a70d2df3e5a
      - name: src/codr/codebase/func.py
        sha256: cade716e6db1f2f9e87a54136675aa32e9570576012378f47af6bbb0de861fc3
        summary: 'purpose=''The file provides a set of asynchronous utility functions
          for interacting with a codebase, including file and directory operations,
          running bash commands, and preparing the environment for tasks.'' definitions=[''_bash_gen:
          Asynchronously runs bash commands and yields their output as bytes.'', ''bash:
          Asynchronously runs bash commands and returns their combined output as a
          string.'', ''bash_sync: Synchronously runs bash commands by wrapping the
          asynchronous bash function with asyncio.run.'', ''read_file: Asynchronously
          reads the content of a file from the codebase.'', "read_file_sync: Synchronously
          reads the content of a file from the codebase and formats it with markdown
          if it''s a Python file.", ''show_tree: Asynchronously returns a string representation
          of the codebase tree.'', ''get_tree: Asynchronously retrieves the codebase
          tree object.'', ''file_exists: Asynchronously checks if a file exists in
          the codebase.'', "create_file: Asynchronously creates a file with the given
          content in the codebase, creating the directory if it doesn''t exist, and
          formats the file if it''s a markdown or Python file.", ''create_directory:
          Asynchronously creates a directory in the codebase.'', "modify_file: Asynchronously
          replaces the content of a file in the codebase and formats it if it''s a
          Python file.", ''delete_file: Asynchronously deletes a file from the codebase.'',
          ''prepare_environment: Asynchronously prepares the git environment for the
          codebase, handling stashing, auto-commit, and branch checkout based on environment
          variables and task details.'', ''fix_file_path: Asynchronously fixes a file
          path to its absolute path in the codebase, handling cases with duplicate
          or missing file names.'']'
      sha256: d4b07005aa284a23b2cc0bd64c3d1c3dac7665d168ac13191d1d54c18530b237
    - name: src/codr/commands
      nodes:
      - name: src/codr/commands/chat.todo
        sha256: 5e6afb42a9426bf7fbdcb5733bf70722e383bb94ed13a85bfa22d2fe6139a1b8
        summary: 'purpose=''The file defines a chat function that interacts with a
          chat agent to provide responses to user queries.'' definitions=[''ChatMessageHistory:
          A class imported from langchain.memory to keep track of chat message history.'',
          ''chat: An asynchronous function that takes a user query as input and returns
          a response from the chat agent.'']'
      - name: src/codr/commands/ask.py
        sha256: 25091443ec0eb23186c4e6373272c0b7ca166e534a2ede78c06d6968406c3de0
        summary: 'purpose=''The file defines a system for identifying relevant files
          in a codebase to answer user questions and provides functionality to generate
          answers based on the codebase content.'' definitions=["RelevantFiles: A
          Pydantic model that represents a list of file paths deemed relevant to a
          user''s question. It includes a validator to ensure the list does not exceed
          seven files and that all files exist within the codebase.", ''get_relevant_files:
          An asynchronous function that determines which files in the codebase are
          most relevant to a given user question. It returns a RelevantFiles object
          containing a list of relevant file paths.'', "codebase_answer: An asynchronous
          function that generates an answer to a user''s question based on the content
          of the codebase tree and a list of relevant files. It utilizes rich formatting
          for terminal output.", ''expert_answer: An asynchronous function that determines
          whether a question requires an expert answer, identifies relevant files
          using get_relevant_files, reads the content of these files, and then uses
          codebase_answer to generate a formatted response.'']'
      - name: src/codr/commands/commit.py
        sha256: b0b30cd8750be8f0bb2b4d6b330d48bd922c9bdd9064a5aa89da450752d634a2
        summary: 'purpose=''The file contains asynchronous functions to automate git
          commit messages and pushing changes to a repository.'' definitions=[''write_commit_message:
          Asynchronously generates a short commit message based on file changes, limited
          to five words and starting with an emoji.'', ''commit_changes: Asynchronously
          stages changes, creates commit messages for each change, commits them, and
          optionally pushes to the repository.'', ''process_change: Asynchronously
          processes a single change, determining the type of change and generating
          an appropriate commit message.'']'
      - name: src/codr/commands/__init__.py
        sha256: 8c75fb9b7c9ef68e13c76c3a53ad91bf96ba7898247501974a5ffcb0b7f0c16e
        summary: purpose='This file serves as an initializer for a module, importing
          and exposing a set of functions related to version control, expert assistance,
          debugging, and task solving.' definitions=['commit_changes - Function to
          commit changes to a version control system.', 'expert_answer - Function
          to provide expert answers or solutions.', 'auto_debug - Function to automatically
          debug code or processes.', 'solve_task - Function to solve a given task
          or problem.']
      - name: src/codr/commands/debug.py
        sha256: 1a013efd78f2e6d6588e70c03b5d26160cdd97d26eb849216a12b158d0fce4c1
        summary: 'purpose="The file defines asynchronous functions for automating
          the debugging process of a command''s output by generating tasks, checking
          results, and iteratively solving issues." definitions=[''generate_task:
          Generate a task description to fix the error based on console output and
          desired output.'', ''check_result: Determine if the console output is healthy.'',
          ''check_desired_output: Check if the console output matches the desired
          output description.'', ''auto_debug: Execute a command, log the result,
          and if the output is not as desired or healthy, generate a task and solve
          it. Optionally, repeat the process in a loop.'']'
      - name: src/codr/commands/implement.py
        sha256: c21375b3c558f1b37c5edc3b132c87222bf1bda45443fcc837913d28f8d021b9
        summary: 'purpose=''The file defines asynchronous functions for planning and
          applying file changes in a codebase as part of solving a given task.'' definitions=[''plan_file_changes:
          Plans the file changes needed to solve a given task within a codebase and
          returns a list of planned file changes.'', ''create_file_prompt: Generates
          the content for a new file based on a planned file change.'', ''modify_file_prompt:
          Generates the modified content for an existing file based on a planned file
          change.'', ''solve_task: Orchestrates the process of solving a task by computing
          and applying file changes, and optionally running a debug command.'', ''compute_changes:
          Computes the file changes to be applied based on the planned changes for
          a given task.'', ''generate_change: Generates a single file change based
          on a planned file change and the current state of the codebase.'', ''apply_changes:
          Applies a list of file changes to the codebase.'', ''generate_changes: Generates
          a list of file changes based on planned file changes (unused function stub).'']'
      - name: src/codr/commands/terminal.todo
        sha256: 188d5bfe33d800f6e0d95f9a289a423852db0b26d55c60846640761c4ce426ef
        summary: purpose="The file appears to be a placeholder or title for content
          related to 'like shell-ai', which might indicate a focus on artificial intelligence
          similar to a shell or command-line interface." definitions=[]
      sha256: 4fee875e58b53f206bd95e4c5d4dd2acc0cddfacf7edebdda56b4b2bfb471d4d
    - name: src/codr/__main__.py
      sha256: 967d4f305609f1e7f6e3811bde37fc16fbc03c8a7771c50f63ca85af5b8fdc2d
      summary: purpose='This file is a Python script that sets a configuration for
        a model and runs a command-line interface (CLI) application.' definitions=['settings
        from funcchain - Used to import and set configuration settings for the application.',
        'app from .cli - Imported to run the CLI application.', "settings.MODEL_NAME
        - A setting that specifies the model name to be used, set to 'gpt-4-1106-preview'.",
        '__name__ == "__main__" - A Python idiom to check if the script is being run
        as the main program.']
    - name: src/codr/_deprecated
      nodes:
      - name: src/codr/_deprecated/files.py
        sha256: ab7b34344ebc83e45e80b6035a2c112e1c0f45ae5e9b4156116fe3d07dc7182d
        summary: 'purpose=''The file provides asynchronous functions to interact with
          a codebase, including summarizing file content, identifying important files
          for a task, fixing file paths, and generating file change plans.'' definitions=[''summarize_file:
          Summarizes the content of a file in a short, understandable description
          without the need for reading the code.'', ''search_important_files: Identifies
          files that are important for understanding and solving a given task.'',
          ''fix_filename: Corrects a given relative file path to match a valid path
          in the CodeBaseTree.'', ''generate_file_change: Creates a detailed plan
          for changes to be made to a file based on an abstract plan and the codebase
          structure.'']'
      - name: src/codr/_deprecated/task.py
        sha256: 44a943a3c6b0aba33d16d7e7ba6e3d444ce70aca0d5d35ef5100367412efe89d
        summary: 'purpose=''The file provides asynchronous functions to improve task
          descriptions and summarize tasks into concise names based on the context
          of a codebase.'' definitions=[''improve_task_description: Enhance the clarity
          and detail of a task description using the codebase context.'', ''summarize_task_to_name:
          Condense a task description into a succinct name of less than 5 words.'']'
      - name: src/codr/_deprecated/__init__.py
        sha256: 200fb483cf16eb8f43558ca736c2a73dd7ba738e919a22dfca75e70d93dfbfea
        summary: 'purpose="The file is intended to import all the contents from two
          modules, ''files'' and ''task'', into the current namespace." definitions=["from
          .files import *  # noqa: Imports everything from the ''files'' module.",
          "from .task import *  # noqa: Imports everything from the ''task'' module."]'
      - name: src/codr/_deprecated/other.py
        sha256: afe6a2f3b6c8e31da7acc96f062ef827e664422ccd1d058f49c40d5d630df03e
        summary: 'purpose=''The file defines asynchronous functions for generating
          a code summary, querying relevant context for file modifications, formatting
          files, and gathering test commands within a codebase.'' definitions=[''generate_code_summary:
          Summarizes the codebase, identifying technologies, frameworks, and general
          structure to provide context for a programmer.'', ''query_relevant_context:
          Queries relevant context for each file based on task, codebase tree, file
          modifications, and an abstract plan.'', ''llm_format: Reformats a given
          file to match proper formatting without changing the code or contents.'',
          ''gather_test_cmd: Gathers the command necessary to test the codebase, which
          could involve a script or manual execution.'']'
      - name: src/codr/_deprecated/chat_agent.py
        sha256: 1d85c145a30f53c9e951ae1262382be46f127df288c1979c4bc12d4a9988b8f1
        summary: 'purpose=''This file defines a Pydantic model for a query handler
          and provides an asynchronous function to select the appropriate query handler
          based on a user query. It also contains a main block to demonstrate the
          usage of the function with a predefined set of query handlers.'' definitions=["QueryHandler:
          A Pydantic model that represents a query handler with a single field ''query_name''
          to store the name of the selected query handler.", ''select_query_handler:
          An asynchronous function that takes a user query and a dictionary of query
          handlers, and returns the QueryHandler instance that best fits the user
          query.'', ''query_handlers: A dictionary defined in the main block that
          maps user commands to their descriptions, used to demonstrate the selection
          of a query handler.'', ''user_query: A string variable defined in the main
          block representing the command that the user wants to execute.'', ''asyncio.run:
          A function call in the main block to execute the select_query_handler function
          asynchronously and obtain the selected query handler.'', ''print: A function
          call in the main block to output the selected query handler to the console.'']'
      sha256: 0ad38fd2ad51d6e2231dc2fa56c0faf0a62ce43172c480bf1c9260d6dffe3530
    - name: src/codr/schema.py
      sha256: 69506c5dc2d6e09fd5023577174aeb818e1a0261587650b5cc31fde835179f33
      summary: 'purpose=''Define data models for representing various types of file
        changes within a codebase, using Pydantic for validation.'' definitions=[''Task:
        A Pydantic model representing a task with optional name and required description.'',
        ''File: A Pydantic model representing a file with a required relative path.'',
        ''PlannedFileChange: A Pydantic model extending File to include a method indicating
        the type of change (create, modify, mkdir, delete) and a description of the
        change. It also includes a method to read the file content and a custom string
        representation.'', ''PlannedFileChanges: A Pydantic model containing a list
        of PlannedFileChange instances, with iterable behavior and a custom string
        representation.'', ''CreatedFile: A Pydantic model extending File to include
        the content of a newly created file.'', ''CreateDirectory: A Pydantic model
        representing the creation of a new directory.'', ''ModifiedFile: A Pydantic
        model extending File to include the content of a modified file.'', ''DeletedFile:
        A Pydantic model representing a deleted file.'', ''FileChange: A Union type
        that includes CreatedFile, CreateDirectory, ModifiedFile, and DeletedFile,
        representing all possible file change types.'']'
    sha256: 0f5a961e4a9297841edf5713b26be9f0474de641c9ec253659944d5302b85e32
  sha256: ae0a68b5a2fd854137bffb16a532915e96d46cb06928e33ccb3674b01157be4b
- name: requirements.lock
  sha256: 625513b2b205f431ba98f583a1045500ce9da1433abb5e6346849595386abb6e
  summary: purpose='This file is a lockfile generated by the Rye package manager,
    which is used to lock the versions of dependencies for a Python project.' definitions=['The
    file includes a list of Python packages with their respective locked versions,
    ensuring that the same versions are used for all installations.', 'The file also
    contains metadata about how it was generated, including flags used during the
    locking process.']
sha256: 6af19872f800569f070fc43e77f4241ef9242788665944d8a486fe03caab0eb3
